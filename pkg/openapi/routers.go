/*
 * PANGEA License Manager
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"net/http"
	"path/filepath"

	"github.com/gin-gonic/gin"
	"github.com/vaefremov/pnglic/config"
	"github.com/vaefremov/pnglic/pkg/dao"
	"github.com/vaefremov/pnglic/pkg/view"
)

// Route is the information for every URI.
type Route struct {
	// Name is the name of this Route.
	Name string
	// Method is the string for the HTTP method. ex) GET, POST etc..
	Method string
	// Pattern is the pattern of the URI.
	Pattern string
	// HandlerFunc is the handler function of this route.
	HandlerFunc gin.HandlerFunc
}

// Routes is the list of the generated Route.
type Routes []Route

func addDatabaseAndConf(db *dao.DbConn, conf *config.Config) gin.HandlerFunc {
	return func(c *gin.Context) {
		c.Set("db", db)
		c.Set("conf", conf)
		c.Next()
	}
}

// NewRouter returns a new router.
func NewRouter(conf *config.Config) *gin.Engine {
	db := dao.MustNewPool(conf.DSN)
	router := gin.Default()
	router.Delims("[[", "]]") // Template delimiters changed to be able to use Vue.js in template-generated pages
	router.Static("/s", filepath.Clean(filepath.Join(conf.StaticContent, "../static")))
	router.LoadHTMLGlob(filepath.Join(conf.StaticContent, "*"))
	router.Use(addDatabaseAndConf(db, conf))
	for _, route := range routes {
		switch route.Method {
		case http.MethodGet:
			router.GET(route.Pattern, route.HandlerFunc)
		case http.MethodPost:
			router.POST(route.Pattern, route.HandlerFunc)
		case http.MethodPut:
			router.PUT(route.Pattern, route.HandlerFunc)
		case http.MethodDelete:
			router.DELETE(route.Pattern, route.HandlerFunc)
		}
	}
	acc := gin.Accounts{conf.AdminName: conf.AdminPass}
	// Note: Basic authentication will be replaced in future with something more secure
	protected := router.Group("/v1/view/", gin.BasicAuth(acc))
	protected.GET("/*c", view.Index)
	return router
}

func DefaultEntryPoint(c *gin.Context) {
	c.Redirect(http.StatusPermanentRedirect, "/v1/view")
}

var routes = Routes{
	{
		"DefaltIndex",
		http.MethodGet,
		"/",
		DefaultEntryPoint,
	},

	{
		"ChangeLicensesCount",
		http.MethodPost,
		"/v1/changeFeaturesCountForKey/:keyId",
		ChangeLicensesCount,
	},

	{
		"CreateFeature",
		http.MethodPut,
		"/v1/feature/:featureName",
		CreateFeature,
	},

	{
		"CreateKey",
		http.MethodPut,
		"/v1/keys",
		CreateKey,
	},

	{
		"DeleteFeature",
		http.MethodDelete,
		"/v1/feature/:featureName",
		DeleteFeature,
	},

	{
		"HistoryLicenseFile",
		http.MethodGet,
		"/v1/historyLicenseFile/:clientId/:timeOfIssue",
		HistoryLicenseFile,
	},

	{
		"LicensedFeaturesForKey",
		http.MethodGet,
		"/v1/licensedFeaturesForKey/:keyId",
		LicensedFeaturesForKey,
	},

	{
		"ListClients",
		http.MethodGet,
		"/v1/clients",
		ListClients,
	},

	{
		"ListFeatures",
		http.MethodGet,
		"/v1/features",
		ListFeatures,
	},

	{
		"ListHistoryItems",
		http.MethodGet,
		"/v1/history/:clientId",
		ListHistoryItems,
	},

	{
		"ListKeys",
		http.MethodGet,
		"/v1/keys",
		ListKeys,
	},

	{
		"MakeLicenseFile",
		http.MethodGet,
		"/v1/newLicenseFile/:clientId/:keyId",
		MakeLicenseFile,
	},

	{
		"PackageContent",
		http.MethodGet,
		"/v1/packageContent/:packageName",
		PackageContent,
	},

	{
		"Ping",
		http.MethodGet,
		"/v1/ping",
		Ping,
	},

	{
		"ProlongLicensedFeaturesForKey",
		http.MethodPost,
		"/v1/prolongLicensedFeaturesForKey/:keyId",
		ProlongLicensedFeaturesForKey,
	},

	{
		"UpdateLicensedFeaturesForKey",
		http.MethodPost,
		"/v1/licensedFeaturesForKey/:keyId",
		UpdateLicensedFeaturesForKey,
	},

	{
		"UpdatePackage",
		http.MethodPost,
		"/v1/packageContent/:packageName",
		UpdatePackage,
	},
}
