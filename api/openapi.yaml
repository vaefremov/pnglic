openapi: 3.0.2
info:
  title: PANGEA License Manager
  version: "0.1"
servers:
- url: http://localhost:9995/v1
paths:
  /ping:
    get:
      operationId: ping
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PingOK'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Return the backend version, DB version, additional info
  /clients:
    get:
      operationId: listClients
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Organization'
                type: array
          description: Array of organizations
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Returns list of all organizations related to licensation
  /keys:
    get:
      operationId: listKeys
      parameters:
      - description: Limit the output to the only client identified with ID
        explode: true
        in: query
        name: clientId
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/HardwareKey'
                type: array
          description: Array of keys
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Returns general list of keys
    put:
      operationId: createKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HardwareKey'
      responses:
        201:
          description: the specified key was added to the set of keys belonging to
            the client specified in the request body
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified key exists already
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Creates a new key and assigns it to the specified client
  /history/{clientId}:
    get:
      operationId: listHistoryItems
      parameters:
      - explode: false
        in: path
        name: clientId
        required: true
        schema:
          format: int32
          type: string
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/HistoryItem'
                type: array
          description: Array of history items
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Returns list of all issues if license files to the specified client
  /historyLicenseFile/{clientId}/{timeOfIssue}:
    get:
      operationId: historyLicenseFile
      parameters:
      - explode: false
        in: path
        name: clientId
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: Time of issue in ISO format
        explode: false
        in: path
        name: timeOfIssue
        required: true
        schema:
          type: string
        style: simple
      responses:
        200:
          content:
            application/xml:
              schema:
                type: string
          description: License file in XML format
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get license file by client id and timestamp of issue
  /makeLicenseFile/{clientId}/{keyId}:
    get:
      operationId: makeLicenseFile
      parameters:
      - explode: false
        in: path
        name: clientId
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: ID of key to generate license file for (set of licenses stored
          in db is used)
        explode: false
        in: path
        name: keyId
        required: true
        schema:
          type: string
        style: simple
      responses:
        200:
          content:
            application/xml:
              schema:
                type: string
          description: License file in XML format
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Generate license file from the current set of licenses related to key
        ID and store it in the history
  /features:
    get:
      operationId: listFeatures
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Feature'
                type: array
          description: Array of features
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Returns list of features
  /packageContent/{packageName}:
    get:
      operationId: packageContent
      parameters:
      - description: Name of the package
        explode: false
        in: path
        name: packageName
        required: true
        schema:
          type: string
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
          description: Array of features
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Returns list of features belonging to the specified package
  /licensedFeaturesForKey/{keyId}:
    get:
      operationId: licensedFeaturesForKey
      parameters:
      - description: Key id to that the currently availble licensed features pertains
          to
        explode: false
        in: path
        name: keyId
        required: true
        schema:
          type: string
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicensedFeatures'
          description: Array of licenses features
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Returns list of all license features related to a given key
    post:
      operationId: updateLicensedFeaturesForKey
      parameters:
      - description: Key id to that the currently availble licensed features pertains
          to
        explode: false
        in: path
        name: keyId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LicensedFeatures'
      responses:
        202:
          description: Null response. Features updated
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Update license features for the given key ID, replace the previousely
        defined ones
  /prolongLicensedFeaturesForKey/{keyId}:
    post:
      operationId: prolongLicensedFeaturesForKey
      parameters:
      - description: Key id to that the currently availble licensed features pertains
          to
        explode: false
        in: path
        name: keyId
        required: true
        schema:
          type: string
        style: simple
      - description: Number of months to add to the expiration term of features
        explode: true
        in: query
        name: byMonths
        required: false
        schema:
          minimum: 1
          type: integer
        style: form
      - description: Final expiration term of license features
        explode: true
        in: query
        name: till
        required: false
        schema:
          format: date
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LicensedFeatures'
      responses:
        202:
          description: Null response. Features updated
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Update license features for the given key ID, replace the previousely
        defined ones
components:
  schemas:
    HardwareKey:
      example:
        comments: comments
        kind: kind
        id: id
        currentOwnerId: 0
      properties:
        id:
          type: string
        kind:
          type: string
        comments:
          type: string
        currentOwnerId:
          format: int32
          type: integer
      required:
      - comments
      - currentOwnerId
      - id
      - kind
      type: object
    Organization:
      example:
        comments: comments
        name: name
        id: 0
        contacts: contacts
      properties:
        id:
          format: int32
          type: integer
        name:
          type: string
        contacts:
          type: string
        comments:
          type: string
      required:
      - comments
      - contacts
      - id
      - name
      type: object
    HistoryItem:
      example:
        orgName: orgName
        whenIssued: whenIssued
      properties:
        orgName:
          type: string
        whenIssued:
          type: string
      required:
      - orgName
      - whenIssued
      type: object
    Feature:
      example:
        name: name
        description: description
        isPackage: true
      properties:
        name:
          type: string
        isPackage:
          type: boolean
        description:
          type: string
      required:
      - name
      type: object
    Features:
      items:
        $ref: '#/components/schemas/Feature'
      type: array
    CountedFeature:
      example:
        name: name
        count: 6
        dupGroup: dupGroup
        version: 0.8008282
      properties:
        name:
          type: string
        version:
          format: float
          type: number
        count:
          type: integer
        dupGroup:
          type: string
      required:
      - count
      - name
      - version
      type: object
    LicensedFeature:
      example:
        start: start
        countedFeature:
          name: name
          count: 6
          dupGroup: dupGroup
          version: 0.8008282
        end: end
      properties:
        countedFeature:
          $ref: '#/components/schemas/CountedFeature'
        start:
          description: YYYY-MM-DD date
          type: string
        end:
          description: YYYY-MM-DD date
          type: string
      required:
      - countedFeature
      - end
      - start
      type: object
    LicensedFeatures:
      items:
        $ref: '#/components/schemas/LicensedFeature'
      type: array
    PingOK:
      example:
        backVersion: backVersion
        dbVersion: dbVersion
      properties:
        backVersion:
          type: string
        dbVersion:
          type: string
      required:
      - backVersion
      - dbVersion
      type: object
    Error:
      properties:
        code:
          format: int32
          type: integer
        message:
          type: string
      required:
      - code
      - message
      type: object
    inline_response_200:
      example:
        features:
        - name: name
          description: description
          isPackage: true
        - name: name
          description: description
          isPackage: true
        package:
          name: name
          description: description
          isPackage: true
      properties:
        package:
          $ref: '#/components/schemas/Feature'
        features:
          items:
            $ref: '#/components/schemas/Feature'
          type: array
      required:
      - features
      - package
